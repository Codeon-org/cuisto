// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Can use the ///@serialize("groups_name") to serialize only some fields combined with the serializePrismaData utils.

enum Role {
  User
}

model RefreshToken {
  id                String   @id @default(uuid()) @db.Uuid
  token             String   @unique
  deviceFingerprint String
  userId            String   @db.Uuid
  user              User     @relation("RefreshTokenUser", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt         DateTime
  createdAt         DateTime @default(now())
}

model User {
  id                 String            @id @default(uuid()) @db.Uuid
  password           String
  username           String            @unique
  email              String            @unique
  roles              Role[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  refreshTokens      RefreshToken[]    @relation("RefreshTokenUser")
  ownedHouses        House[]           @relation("HouseOwner")
  houses             House[]           @relation("HouseMember")
  invitationCreated  HouseInvitation[] @relation("InvitationAuthor")
  invitationReceived HouseInvitation[] @relation("InvitationReceiver")
}

model House {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ownerId         String            @db.Uuid
  owner           User              @relation("HouseOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  users           User[]            @relation("HouseMember")
  houseInvitation HouseInvitation[] @relation("HouseInvitations")
  products        Product[]         @relation("ProductHouse")
}

model HouseInvitation {
  id         String   @id @default(uuid()) @db.Uuid
  houseId    String   @db.Uuid
  house      House    @relation("HouseInvitations", fields: [houseId], references: [id], onDelete: Cascade)
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  isUsed     Boolean  @default(false)
  authorId   String   @db.Uuid
  author     User     @relation("InvitationAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  receiverId String   @db.Uuid
  receiver   User     @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Product {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  barcode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  houseId   String   @db.Uuid
  house     House    @relation("ProductHouse", fields: [houseId], references: [id], onDelete: Cascade)
}

// model Unit {
//   id               Int       @id @default(autoincrement())
//   name             String    @unique
//   symbol           String    @unique
//   conversionFactor Float?
//   baseUnitId       Int?
//   baseUnit         Unit?     @relation("BaseUnit", fields: [baseUnitId], references: [id])
//   variations       Unit[]    @relation("BaseUnit")
//   createdAt        DateTime  @default(now()) @map("created_at")
//   updatedAt        DateTime  @default(now()) @map("updated_at")
//   products         Product[]

//   recipes RecipeProduct[]
// }

// model Recipe {
//   id          Int      @id @default(autoincrement())
//   name        String
//   description String?
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @default(now()) @map("updated_at")

//   // Many-to-Many relation through RecipeProduct
//   products RecipeProduct[]
// }

// model RecipeProduct {
//   id Int @id @default(autoincrement())

//   // Many-to-Many between Recipe and Product
//   recipeId Int
//   recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

//   productId Int
//   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

//   // Quantity and unit for the product in this specific recipe
//   quantity Float
//   unitId   Int
//   unit     Unit  @relation(fields: [unitId], references: [id], onDelete: Restrict)

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")

//   @@unique([recipeId, productId])
// }
